<?php

namespace App\Orchid\Screens;

use App\Models\Point;
use Illuminate\Http\Request;
use Orchid\Screen\Actions\Button;
use Orchid\Screen\Actions\ModalToggle;
use Orchid\Screen\Fields\Input;
use Orchid\Screen\Screen;
use Orchid\Screen\TD;
use Orchid\Support\Facades\Layout;

class PointScreen extends Screen
{
    /**
     * Fetch data to be displayed on the screen.
     *
     * @return array
     */
    public function query(): iterable
    {
        return [
            'points' => Point::paginate(20)
        ];
    }

    /**
     * The name of the screen displayed in the header.
     *
     * @return string|null
     */
    public function name(): ?string
    {
        return 'PointScreen';
    }

    public function description(): ?string
    {
        return 'Points list screen'; // TODO: Change the autogenerated stub
    }

    /**
     * The screen's action buttons.
     *
     * @return \Orchid\Screen\Action[]
     */
    public function commandBar(): iterable
    {
        return [
            ModalToggle::make('Add Point')
                ->modal('pointModal')
                ->method('create')
                ->icon('plus')
        ];
    }

    /**
     * The screen's layout elements.
     *
     * @return \Orchid\Screen\Layout[]|string[]
     */
    public function layout(): iterable
    {
        return [
            Layout::table('points', [
                TD::make('name'),
                TD::make('Actions')
                    ->alignRight()
                    ->render(function (Point $point){
                        return Button::make('Delete point')
                            ->confirm('Are you sure?')
                            ->icon('trash')
                            ->method('delete', [
                                'point' => $point->id
                            ]);
                    })
            ]),
            Layout::modal('pointModal', Layout::rows([
                Input::make('point.name')
                    ->title('Name')
                    ->placeholder('Input point name')
                    ->help('The name of the point to be created')
            ]))->title('Create point')->applyButton('Add point'),
        ];
    }

    public function create(Request $request): void
    {
        $request->validate([
            'point.name' => 'required|max:255'
        ]);

        $point = new Point();
        $point->name = $request->input('point.name');
        $point->save();
    }

    public function delete(Point $point): void
    {
        $point->delete();
    }
}
